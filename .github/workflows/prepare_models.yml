name: Prepare models

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "Бранч или тег, для которого нужно подготовить модели"
        default: main
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: prepare-models-${{ github.ref }}
  cancel-in-progress: false

jobs:
  prepare:
    name: Prepare and publish models
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || github.ref }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install system dependencies and build NCNN tools
        run: |
          set -euxo pipefail
          sudo apt-get update
          APT_PACKAGES="git-lfs wget unzip ffmpeg libonnx-dev protobuf-compiler libprotobuf-dev cmake ninja-build build-essential lld"
          sudo apt-get install -y ${APT_PACKAGES}

          NCNN_REPO=https://github.com/Tencent/ncnn.git
          NCNN_COMMIT=56775de50990ab7f16627efdcf5529b49541206f
          git clone ${NCNN_REPO} ncnn
          git -C ncnn checkout ${NCNN_COMMIT}
          cmake -S ncnn -B ncnn/build -G Ninja \
            -DNCNN_VULKAN=OFF \
            -DNCNN_BUILD_TOOLS=ON \
            -DNCNN_BUILD_EXAMPLES=OFF \
            -DNCNN_BUILD_BENCHMARK=OFF
          cmake --build ncnn/build --target onnx2ncnn ncnnoptimize
          ls -l ncnn/build/tools
          sudo install -m 0755 ncnn/build/tools/onnx/onnx2ncnn /usr/local/bin/onnx2ncnn
          sudo install -m 0755 ncnn/build/tools/ncnnoptimize /usr/local/bin/ncnnoptimize
          sudo ldconfig
          if ! onnx2ncnn --help >/dev/null 2>&1; then
            echo "onnx2ncnn не поддерживает --help, выполняем холостой запуск"
            onnx2ncnn </dev/null >/dev/null 2>&1 || true
          fi
          if ! ncnnoptimize --help >/dev/null 2>&1; then
            echo "ncnnoptimize не поддерживает --help, выполняем холостой запуск"
            ncnnoptimize </dev/null >/dev/null 2>&1 || true
          fi
          rm -rf ncnn

      - name: Verify NCNN tools availability
        run: |
          set -euxo pipefail
          command -v onnx2ncnn
          onnx2ncnn </dev/null >/dev/null 2>&1 || true
          command -v ncnnoptimize
          ncnnoptimize </dev/null >/dev/null 2>&1 || true

      - name: Install Python dependencies
        run: |
          set -euxo pipefail
          python3 -m pip install --upgrade pip
          python3 -m pip install \
            "numpy<2" \
            torch torchvision \
            "onnx==1.16.*" "onnxruntime==1.16.*" "onnxsim==0.4.*" onnx-graphsurgeon onnxscript \
            einops "opencv-python-headless<5" tqdm pyyaml "scipy<1.14" "scikit-image<0.23" \
            psutil "ml_dtypes<0.5"
          python3 - <<'PY'
          import onnx
          print(f"ONNX {onnx.__version__} OK")
          PY
          python3 - <<'PY'
          import importlib.metadata as metadata
          packages = [
              "numpy",
              "torch",
              "torchvision",
              "onnx",
              "onnxruntime",
              "onnxsim",
              "onnx-graphsurgeon",
              "psutil",
              "einops",
              "opencv-python-headless",
              "tqdm",
              "pyyaml",
              "scipy",
              "scikit-image",
              "ml_dtypes",
          ]
          for pkg in packages:
              try:
                  version = metadata.version(pkg)
              except metadata.PackageNotFoundError:
                  version = "не установлен"
              print(f"{pkg}: {version}")
          PY

      - name: Prepare model artifacts
        env:
          PYTHONPATH: "${{ github.workspace }}:$PYTHONPATH"
        run: |
          set -euxo pipefail
          bash scripts/prepare_models.sh

      - name: Configure Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Publish release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euxo pipefail
          bash scripts/publish_models_release.sh

      - name: Create PR with updated model artifacts
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: bot/models-release-${{ github.run_id }}
          base: main
          title: "chore(models): update model lock & checksums"
          commit-message: "chore(models): update model lock & checksums"
          body: "Автоматическое обновление артефактов моделей."
          labels: automated, models
          add-paths: |
            models.lock.json
