name: Prepare models

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "Бранч или тег, для которого нужно подготовить модели"
        default: main
        required: true

permissions:
  contents: write
  pull-requests: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.ref || github.ref }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install system dependencies and build NCNN tools
        run: |
          set -euxo pipefail
          sudo apt-get update
          APT_PACKAGES="git-lfs wget unzip ffmpeg libonnx-dev protobuf-compiler libprotobuf-dev cmake ninja-build build-essential lld"
          sudo apt-get install -y ${APT_PACKAGES}

          NCNN_REPO=https://github.com/Tencent/ncnn.git
          NCNN_COMMIT=56775de50990ab7f16627efdcf5529b49541206f
          git clone ${NCNN_REPO} ncnn
          git -C ncnn checkout ${NCNN_COMMIT}
          cmake -S ncnn -B ncnn/build -G Ninja \
            -DNCNN_VULKAN=OFF \
            -DNCNN_BUILD_TOOLS=ON \
            -DNCNN_BUILD_EXAMPLES=OFF \
            -DNCNN_BUILD_BENCHMARK=OFF
          cmake --build ncnn/build --target onnx2ncnn ncnnoptimize
          ls -l ncnn/build/tools
          sudo install -m 0755 ncnn/build/tools/onnx/onnx2ncnn /usr/local/bin/onnx2ncnn
          sudo install -m 0755 ncnn/build/tools/ncnnoptimize /usr/local/bin/ncnnoptimize
          sudo ldconfig
          if ! onnx2ncnn --help >/dev/null 2>&1; then
            echo "onnx2ncnn не поддерживает --help, выполняем холостой запуск"
            onnx2ncnn </dev/null >/dev/null 2>&1 || true
          fi
          if ! ncnnoptimize --help >/dev/null 2>&1; then
            echo "ncnnoptimize не поддерживает --help, выполняем холостой запуск"
            ncnnoptimize </dev/null >/dev/null 2>&1 || true
          fi
          rm -rf ncnn

      - name: Verify NCNN tools availability
        run: |
          set -euxo pipefail
          command -v onnx2ncnn
          onnx2ncnn </dev/null >/dev/null 2>&1 || true
          command -v ncnnoptimize
          ncnnoptimize </dev/null >/dev/null 2>&1 || true

      - name: Install Python dependencies
        run: |
          set -euxo pipefail
          python3 -m pip install --upgrade pip
          python3 -m pip install \
            "numpy<=1.26.4" \
            torch torchvision \
            "onnx==1.14.*" "onnxruntime==1.16.*" "onnxsim==0.4.*" "onnx2tf==1.24.1" \
            "tensorflow==2.13.1" "tf-keras==2.13.*" "tensorflow-addons==0.22.*" "onnx-tf==1.10.0" \
            einops "opencv-python-headless<5" lmdb tqdm pyyaml "scipy<1.14" "scikit-image<0.23"
          python3 - <<'PY'
import importlib.metadata as metadata
packages = [
    "numpy",
    "torch",
    "torchvision",
    "onnx",
    "onnxruntime",
    "onnxsim",
    "onnx2tf",
    "tensorflow",
    "tf-keras",
    "tensorflow-addons",
    "onnx-tf",
    "einops",
    "opencv-python-headless",
    "lmdb",
    "tqdm",
    "pyyaml",
    "scipy",
    "scikit-image",
]
for pkg in packages:
    try:
        version = metadata.version(pkg)
    except metadata.PackageNotFoundError:
        version = "не установлен"
    print(f"{pkg}: {version}")
PY

      - name: Prepare model artifacts
        env:
          TF_USE_LEGACY_KERAS: "1"
          KERAS_BACKEND: "tensorflow"
        run: |
          set -euxo pipefail
          bash scripts/prepare_models.sh

      - name: Configure Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Publish release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euxo pipefail
          bash scripts/publish_models_release.sh
      - name: Create PR with updated model artifacts
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: bot/models-release-${{ github.run_id }}
          base: main
          title: "chore(models): update model lock & checksums"
          commit-message: "chore(models): update model lock & checksums"
          body: "Автоматическое обновление артефактов моделей."
          labels: automated, models
          add-paths: |
            models.lock.json
